/**
 * This file is auto-generated by nestjs-proto-gen-ts
 */

import { Metadata } from '@grpc/grpc-js';
import { Observable } from 'rxjs';

export const LEXIC_SERVICE_NAME = 'LexicService';
export const LEXIC_PACKAGE_NAME = 'lexic';

export namespace lexic {
  export interface LexicService {
    createWord(
      data: CreateWordRequest,
      metadata?: Metadata,
      ...rest: any[]
    ): Observable<CreateWordResponse>;
    findOneWordById(
      data: FindOneWordByIdRequest,
      metadata?: Metadata,
      ...rest: any[]
    ): Observable<FindOneWordByIdResponse>;
    findManyWordsByVocabularyId(
      data: FindManyWordsByVocabularyIdRequest,
      metadata?: Metadata,
      ...rest: any[]
    ): Observable<FindManyWordsByVocabularyIdResponse>;
    findManyWordsByLexicCategoryId(
      data: FindManyWordsByLexicCategoryIdRequest,
      metadata?: Metadata,
      ...rest: any[]
    ): Observable<FindManyWordsByLexicCategoryIdResponse>;
    createWordToVocabulary(
      data: CreateWordToVocabularyRequest,
      metadata?: Metadata,
      ...rest: any[]
    ): Observable<CreateWordToVocabularyResponse>;
    updateWordToVocabulary(
      data: UpdateWordToVocabularyRequest,
      metadata?: Metadata,
      ...rest: any[]
    ): Observable<UpdateWordToVocabularyResponse>;
    createLexicCategory(
      data: CreateLexicCategoryRequest,
      metadata?: Metadata,
      ...rest: any[]
    ): Observable<CreateLexicCategoryResponse>;
    findManyLexicCategoriesByCreatorId(
      data: FindManyLexicCategoriesByCreatorIdRequest,
      metadata?: Metadata,
      ...rest: any[]
    ): Observable<FindManyLexicCategoriesByCreatorIdResponse>;

    findManyLexicCategories(
      data: FindManyLexicCategoriesRequest,
      metadata?: Metadata,
      ...rest: any[]
    ): Observable<FindManyLexicCategoriesResponse>;
    createVocabulary(
      data: CreateVocabularyRequest,
      metadata?: Metadata,
      ...rest: any[]
    ): Observable<CreateVocabularyResponse>;
    findManyVocabulariesByUserId(
      data: FindManyVocabulariesByUserIdRequest,
      metadata?: Metadata,
      ...rest: any[]
    ): Observable<FindManyVocabulariesByUserIdResponse>;
  }
  export interface PageFilters {
    page?: number;
    limit?: number;
  }
  // | CreateWord
  export interface CreateWordRequest {
    word?: string;
    transcription?: string;
    language?: string;
    lexicCategoryId?: string;
  }
  export interface CreateWordResponse {
    status?: number;
    error?: string[];
    id?: string;
  }
  // | FindOneWordById
  export interface FindOneWordByIdRequest {
    id?: string;
  }
  export interface FindOneWordByIdResponse {
    status?: number;
    error?: string[];
    word?: FindOneWordByIdResponse.Word;
  }
  export namespace FindOneWordByIdResponse {
    export interface Word {
      id?: string;
      word?: string;
      transcription?: string;
      language?: string;
      lexicCategories?: Word.LexicCategory[];
      wordToVocabulary?: Word.WordToVocabulary[];
    }
    export namespace Word {
      export interface LexicCategory {
        id?: string;
        categoryName?: string;
        creatorUserId?: string;
      }
      export interface WordToVocabulary {
        id?: string;
        vocabularyId?: string;
        wordId?: string;
        isFinished?: boolean;
      }
    }
  }
  // | FindManyWordsByVocabularyId
  export interface FindManyWordsByVocabularyIdData {
    count?: number;
    rows?: FindOneWordByIdResponse.Word[];
  }
  export interface FindManyWordsByVocabularyIdRequest {
    vocabularyId?: string;
    pageFilters?: lexic.PageFilters;
  }
  export interface FindManyWordsByVocabularyIdResponse {
    status?: number;
    error?: string[];
    data?: lexic.FindManyWordsByVocabularyIdData;
  }
  // | FindManyWordsByLexicCategoryId
  export interface FindManyWordsByLexicCategoryIdData {
    count?: number;
    rows?: FindOneWordByIdResponse.Word[];
  }
  export interface FindManyWordsByLexicCategoryIdRequest {
    lexicCategoryId?: string;
    pageFilters?: lexic.PageFilters;
  }
  export interface FindManyWordsByLexicCategoryIdResponse {
    status?: number;
    error?: string[];
    data?: lexic.FindManyWordsByLexicCategoryIdData;
  }
  // | CreateWordToVocabulary
  export interface CreateWordToVocabularyRequest {
    vocabularyId?: string;
    wordId?: string;
  }
  export interface CreateWordToVocabularyResponse {
    status?: number;
    error?: string[];
    id?: string;
  }
  // | UpdateWordToVocabulary
  export interface UpdateWordToVocabularyRequest {
    id?: string;
    userId?: string;
    isFinished?: boolean;
  }
  export interface UpdateWordToVocabularyResponse {
    status?: number;
    error?: string[];
  }
  // | CreateLexicCategory
  export interface CreateLexicCategoryRequest {
    categoryName?: string;
    creatorUserId?: string;
  }
  export interface CreateLexicCategoryResponse {
    status?: number;
    error?: string[];
    id?: string;
  }
  // | FindManyLexicCategoriesByCreatorId
  export interface FindManyLexicCategoriesByCreatorIdData {
    count?: number;
    rows?: FindManyLexicCategoriesByCreatorIdData.LexicCategory[];
  }
  export namespace FindManyLexicCategoriesByCreatorIdData {
    export interface LexicCategory {
      id?: string;
      categoryName?: string;
      creatorUserId?: string;
    }
  }
  export interface FindManyLexicCategoriesByCreatorIdRequest {
    creatorId?: string;
    pageFilters?: lexic.PageFilters;
  }
  export interface FindManyLexicCategoriesByCreatorIdResponse {
    status?: number;
    error?: string[];
    data?: lexic.FindManyLexicCategoriesByCreatorIdData;
  }
    // | FindManyLexicCategories
    export interface FindManyLexicCategoriesData {
      count?: number;
      rows?: FindManyLexicCategoriesData.LexicCategory[];
    }
    export namespace FindManyLexicCategoriesData {
      export interface LexicCategory {
        id?: string;
        categoryName?: string;
        creatorUserId?: string;
      }
    }
    export interface FindManyLexicCategoriesRequest {
      pageFilters?: lexic.PageFilters;
    }
    export interface FindManyLexicCategoriesResponse {
      status?: number;
      error?: string[];
      data?: lexic.FindManyLexicCategoriesData;
    }
  // | CreateVocabulary
  export interface CreateVocabularyRequest {
    userId?: string;
    language?: string;
    vocabularyNativeLanguage?: string;
  }
  export interface CreateVocabularyResponse {
    status?: number;
    error?: string[];
    id?: string;
  }
  // | FindManyVocabulariesByUserId
  export interface FindManyVocabulariesByUserIdData {
    count?: number;
    rows?: FindManyVocabulariesByUserIdData.Vocabulary[];
  }
  export namespace FindManyVocabulariesByUserIdData {
    // | FindManyVocabulariesByUserId
    export interface Vocabulary {
      id?: string;
      userId?: string;
      language?: string;
      vocabularyNativeLanguage?: string;
    }
  }
  export interface FindManyVocabulariesByUserIdRequest {
    userId?: string;
    pageFilters?: lexic.PageFilters;
  }
  export interface FindManyVocabulariesByUserIdResponse {
    status?: number;
    error?: string[];
    data?: lexic.FindManyVocabulariesByUserIdData;
  }
}
