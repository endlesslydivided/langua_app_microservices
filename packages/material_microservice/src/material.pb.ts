/**
* This file is auto-generated by nestjs-proto-gen-ts
*/

import { Observable } from 'rxjs';
import { Metadata } from '@grpc/grpc-js';

export const MATERIAL_SERVICE_NAME = "MaterialService"
export const MATERIAL_PACKAGE_NAME = "material"

export namespace material {
    export interface MaterialService {
        createMaterial(
            data: CreateMaterialRequest,
            metadata?: Metadata,
            ...rest: any[]
        ): Observable<CreateMaterialResponse>;
        findOneMaterialById(
            data: FindOneMaterialByIdRequest,
            metadata?: Metadata,
            ...rest: any[]
        ): Observable<FindOneMaterialByIdResponse>;
        findManyMaterialsByVocabularyId(
            data: FindManyMaterialsByVocabularyIdRequest,
            metadata?: Metadata,
            ...rest: any[]
        ): Observable<FindManyMaterialsByVocabularyIdResponse>;
        findManyMaterialsByCreatorId(
            data: FindManyMaterialsByCreatorIdRequest,
            metadata?: Metadata,
            ...rest: any[]
        ): Observable<FindManyMaterialsByCreatorIdResponse>;
        createMaterialToVocabulary(
            data: CreateMaterialToVocabularyRequest,
            metadata?: Metadata,
            ...rest: any[]
        ): Observable<CreateMaterialToVocabularyResponse>;
        updateMaterialToVocabulary(
            data: UpdateMaterialToVocabularyRequest,
            metadata?: Metadata,
            ...rest: any[]
        ): Observable<UpdateMaterialToVocabularyResponse>;
        deleteMaterialToVocabulary(
            data: DeleteMaterialToVocabularyRequest,
            metadata?: Metadata,
            ...rest: any[]
        ): Observable<DeleteMaterialToVocabularyResponse>;
    }
    export interface PageFilters {
        page?: number;
        limit?: number;
    }
    // | CreateMaterial
    export interface CreateMaterialRequest {
        creatorUserId?: string;
        name?: string;
        language?: string;
        textContent?: string;
    }
    export interface CreateMaterialResponse {
        status?: number;
        error?: string[];
        id?: string;
    }
    // | FindOneMaterialById
    export interface Material {
        id?: string;
        name?: string;
        language?: string;
        textContent?: string;
        creatorUserId?: string;
    }
    export interface FindOneMaterialByIdRequest {
        id?: string;
    }
    export interface FindOneMaterialByIdResponse {
        status?: number;
        error?: string[];
        material?: material.Material;
    }
    // | FindManyMaterialsByVocabularyId
    export interface FindManyMaterialsByVocabularyIdData {
        count?: number;
        rows?: FindManyMaterialsByVocabularyIdData.Material[];
    }
    export namespace FindManyMaterialsByVocabularyIdData {
        // | FindManyMaterialsByVocabularyId
        export interface Material {
            id?: string;
            name?: string;
            language?: string;
            textContent?: string;
            creatorUserId?: string;
            materialToVocabulary?: Material.MaterialToVocabulary;
        }
        export namespace Material {
            export interface MaterialToVocabulary {
                id?: string;
                vocabularyId?: string;
                materialId?: string;
                isFinished?: boolean;
            }
        }
    }
    export interface FindManyMaterialsByVocabularyIdRequest {
        vocabularyId?: string;
        pageFilters?: material.PageFilters;
    }
    export interface FindManyMaterialsByVocabularyIdResponse {
        status?: number;
        error?: string[];
        data?: material.FindManyMaterialsByVocabularyIdData;
    }
    // | FindManyMaterialsByCreatorId
    export interface FindManyMaterialsBCreatorIdData {
        count?: number;
        rows?: FindManyMaterialsBCreatorIdData.Material[];
    }
    export namespace FindManyMaterialsBCreatorIdData {
        // | FindManyMaterialsByCreatorId
        export interface Material {
            id?: string;
            name?: string;
            language?: string;
            textContent?: string;
            creatorUserId?: string;
        }
    }
    export interface FindManyMaterialsByCreatorIdRequest {
        creatorId?: string;
        pageFilters?: material.PageFilters;
    }
    export interface FindManyMaterialsByCreatorIdResponse {
        status?: number;
        error?: string[];
        data?: material.FindManyMaterialsBCreatorIdData;
    }
    // | CreateMaterialToVocabulary
    export interface CreateMaterialToVocabularyRequest {
        vocabularyId?: string;
        materialId?: string;
    }
    export interface CreateMaterialToVocabularyResponse {
        status?: number;
        error?: string[];
        id?: string;
    }
    // | UpdateMaterialToVocabulary
    export interface UpdateMaterialToVocabularyRequest {
        id?: string;
        userId?: string;
        isFinished?: boolean;
    }
    export interface UpdateMaterialToVocabularyResponse {
        status?: number;
        error?: string[];
    }
    // | DeleteMaterialToVocabulary
    export interface DeleteMaterialToVocabularyRequest {
        id?: string;
    }
    export interface DeleteMaterialToVocabularyResponse {
        status?: number;
        error?: string[];
    }
}

